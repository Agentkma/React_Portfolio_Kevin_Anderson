'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _lodash = require('lodash.sortby');

var _lodash2 = _interopRequireDefault(_lodash);

var _SliderTrack = require('./SliderTrack');

var _SliderTrack2 = _interopRequireDefault(_SliderTrack);

var _CardWrapper = require('./CardWrapper');

var _CardWrapper2 = _interopRequireDefault(_CardWrapper);

var _RightArrow = require('./RightArrow');

var _RightArrow2 = _interopRequireDefault(_RightArrow);

var _LeftArrow = require('./LeftArrow');

var _LeftArrow2 = _interopRequireDefault(_LeftArrow);

var _SliderWrapper = require('./SliderWrapper');

var _SliderWrapper2 = _interopRequireDefault(_SliderWrapper);

var _SliderList = require('./SliderList');

var _SliderList2 = _interopRequireDefault(_SliderList);

var _DotsWrapper = require('./DotsWrapper');

var _DotsWrapper2 = _interopRequireDefault(_DotsWrapper);

var _Dot = require('./Dot');

var _Dot2 = _interopRequireDefault(_Dot);

var _Timer = require('../utils/Timer');

var _Timer2 = _interopRequireDefault(_Timer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* global window */


var Slider = function (_React$Component) {
  _inherits(Slider, _React$Component);

  function Slider(props) {
    _classCallCheck(this, Slider);

    var _this = _possibleConstructorReturn(this, (Slider.__proto__ || Object.getPrototypeOf(Slider)).call(this, props));

    _this.renderChildren = _this.renderChildren.bind(_this);
    _this.handleLeftArrowClick = _this.handleLeftArrowClick.bind(_this);
    _this.handleRightArrowClick = _this.handleRightArrowClick.bind(_this);
    _this.changeInitialCard = _this.changeInitialCard.bind(_this);
    _this.renderDots = _this.renderDots.bind(_this);
    _this.renderLeftArrow = _this.renderLeftArrow.bind(_this);
    _this.renderRightArrow = _this.renderRightArrow.bind(_this);
    _this.updateResponsiveView = _this.updateResponsiveView.bind(_this);
    _this.state = {
      initialCard: 0,
      childWidth: 0,
      cardsToShow: 0,
      hideArrows: false
    };
    return _this;
  }

  _createClass(Slider, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var _props = this.props,
          children = _props.children,
          cardsToShowProp = _props.cardsToShow,
          autoSlide = _props.autoSlide,
          hideArrowsOnNoSlides = _props.hideArrowsOnNoSlides;

      var numberOfChildren = children ? children.length || 1 : 0;
      var cardsToShow = cardsToShowProp || numberOfChildren;
      var childWidth = 100 / cardsToShow;
      this.setState({ // eslint-disable-line react/no-did-mount-set-state
        childWidth: childWidth,
        cardsToShow: cardsToShow,
        hideArrows: hideArrowsOnNoSlides && numberOfChildren <= cardsToShow
      }, function () {
        return _this2.updateResponsiveView();
      });
      typeof window !== 'undefined' && // eslint-disable-line no-unused-expressions
      window.addEventListener('resize', this.updateResponsiveView);
      if (autoSlide) {
        this.autoSlider = new _Timer2.default(function () {
          var updatedInitialCard = 0;
          if (numberOfChildren - _this2.state.cardsToShow > _this2.state.initialCard) {
            updatedInitialCard = _this2.state.initialCard + 1;
          }
          _this2.setState({
            initialCard: updatedInitialCard
          });
        }, autoSlide === true ? 2000 : autoSlide);
        this.autoSlider.start();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      typeof window !== 'undefined' && // eslint-disable-line no-unused-expressions
      window.removeEventListener('resize', this.updateResponsiveView);
    }
  }, {
    key: 'updateResponsiveView',
    value: function updateResponsiveView() {
      var _props2 = this.props,
          children = _props2.children,
          hideArrowsOnNoSlides = _props2.hideArrowsOnNoSlides;
      var responsive = this.props.responsive;

      var numberOfChildren = children ? children.length || 1 : 0;
      if (responsive) {
        responsive = (0, _lodash2.default)(responsive, 'breakPoint');
        var updatedCardsToShow = this.state.cardsToShow;
        responsive.forEach(function (_ref) {
          var breakPoint = _ref.breakPoint,
              cardsToShow = _ref.cardsToShow;

          if (breakPoint <= window.innerWidth) {
            updatedCardsToShow = cardsToShow;
          }
        });
        var updatedInitialCard = numberOfChildren - updatedCardsToShow < this.state.initialCard ? numberOfChildren - updatedCardsToShow : this.state.initialCard;
        this.setState({
          cardsToShow: updatedCardsToShow,
          childWidth: 100 / updatedCardsToShow,
          initialCard: updatedInitialCard,
          hideArrows: hideArrowsOnNoSlides && numberOfChildren <= updatedCardsToShow
        });
      }
    }
  }, {
    key: 'changeInitialCard',
    value: function changeInitialCard(initialCard) {
      var _props3 = this.props,
          afterSlide = _props3.afterSlide,
          beforeSlide = _props3.beforeSlide;

      if (beforeSlide) {
        beforeSlide();
      }
      this.setState({
        initialCard: initialCard
      }, function () {
        if (afterSlide) {
          afterSlide();
        }
      });
    }
  }, {
    key: 'handleLeftArrowClick',
    value: function handleLeftArrowClick(evt) {
      var children = this.props.children;
      var cardsToShow = this.state.cardsToShow;

      var childrenCount = children ? children.length : 0;
      if (evt && evt.preventDefault) {
        evt.preventDefault();
      }
      var nextInitialCard = this.state.initialCard - 1;
      if (nextInitialCard < 0) {
        nextInitialCard = childrenCount - cardsToShow;
      }
      this.changeInitialCard(nextInitialCard);
    }
  }, {
    key: 'handleRightArrowClick',
    value: function handleRightArrowClick(evt) {
      var children = this.props.children;
      var cardsToShow = this.state.cardsToShow;

      var childrenCount = children ? children.length : 0;
      if (evt && evt.preventDefault) {
        evt.preventDefault();
      }
      var nextInitialCard = this.state.initialCard + 1;
      if (childrenCount - cardsToShow < nextInitialCard) {
        nextInitialCard = 0;
      }
      this.changeInitialCard(nextInitialCard);
    }
  }, {
    key: 'renderChildren',
    value: function renderChildren(children) {
      var childWidth = this.state.childWidth;

      var displayCards = [];
      _react2.default.Children.forEach(children, function (child, index) {
        displayCards.push(_react2.default.createElement(
          _CardWrapper2.default,
          { key: index, width: childWidth },
          child
        ));
      });
      return displayCards;
    }
  }, {
    key: 'renderDots',
    value: function renderDots() {
      var _this3 = this;

      var dots = [];
      var _props4 = this.props,
          children = _props4.children,
          Dot = _props4.Dot;

      var numberOfChildren = children ? children.length || 1 : 0;
      var i = void 0;

      var _loop = function _loop() {
        var index = i;
        dots.push(_react2.default.cloneElement(Dot, {
          active: index === _this3.state.initialCard,
          key: index,
          onClick: function onClick() {
            return _this3.changeInitialCard(index);
          }
        }));
      };

      for (i = 0; i <= numberOfChildren - this.state.cardsToShow; i += 1) {
        _loop();
      }
      return dots;
    }
  }, {
    key: 'renderLeftArrow',
    value: function renderLeftArrow() {
      var _props5 = this.props,
          LeftArrow = _props5.LeftArrow,
          infinite = _props5.infinite;
      var initialCard = this.state.initialCard;

      return _react2.default.cloneElement(LeftArrow, {
        onClick: this.handleLeftArrowClick,
        disabled: !infinite && !initialCard
      });
    }
  }, {
    key: 'renderRightArrow',
    value: function renderRightArrow() {
      var _props6 = this.props,
          RightArrow = _props6.RightArrow,
          children = _props6.children,
          infinite = _props6.infinite;

      var numberOfChildren = children ? children.length || 1 : 0;
      var _state = this.state,
          initialCard = _state.initialCard,
          cardsToShow = _state.cardsToShow;

      return _react2.default.cloneElement(RightArrow, {
        onClick: this.handleRightArrowClick,
        disabled: !infinite && initialCard + cardsToShow === numberOfChildren
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      var _props7 = this.props,
          children = _props7.children,
          cardsToShow = _props7.cardsToShow,
          showDots = _props7.showDots,
          showArrows = _props7.showArrows,
          pauseOnMouseOver = _props7.pauseOnMouseOver,
          DotsWrapper = _props7.DotsWrapper,
          otherProps = _objectWithoutProperties(_props7, ['children', 'cardsToShow', 'showDots', 'showArrows', 'pauseOnMouseOver', 'DotsWrapper']);

      var _state2 = this.state,
          initialCard = _state2.initialCard,
          childWidth = _state2.childWidth;

      return _react2.default.createElement(
        'div',
        {
          onMouseLeave: function onMouseLeave() {
            return pauseOnMouseOver && _this4.autoSlider && _this4.autoSlider.resume();
          },
          onMouseEnter: function onMouseEnter() {
            return pauseOnMouseOver && _this4.autoSlider && _this4.autoSlider.pause();
          }
        },
        _react2.default.createElement(
          _SliderWrapper2.default,
          otherProps,
          showArrows && !this.state.hideArrows && this.renderLeftArrow(),
          _react2.default.createElement(
            _SliderTrack2.default,
            null,
            _react2.default.createElement(
              _SliderList2.default,
              { translateX: initialCard * childWidth },
              this.renderChildren(children, cardsToShow || children.length)
            )
          ),
          showArrows && !this.state.hideArrows && this.renderRightArrow()
        ),
        _react2.default.createElement(
          DotsWrapper,
          null,
          showDots && this.renderDots()
        )
      );
    }
  }]);

  return Slider;
}(_react2.default.Component);

Slider.defaultProps = {
  showDots: true,
  showArrows: true,
  LeftArrow: _react2.default.createElement(_LeftArrow2.default, null),
  RightArrow: _react2.default.createElement(_RightArrow2.default, null),
  Dot: _react2.default.createElement(_Dot2.default, null),
  DotsWrapper: _DotsWrapper2.default,
  cardsToShow: null,
  afterSlide: null,
  beforeSlide: null,
  infinite: true,
  responsive: null,
  autoSlide: 2000,
  pauseOnMouseOver: true,
  padding: '0px 20px',
  margin: '0px',
  hideArrowsOnNoSlides: true
};

Slider.propTypes = {
  LeftArrow: _propTypes2.default.node,
  RightArrow: _propTypes2.default.node,
  Dot: _propTypes2.default.node,
  showArrows: _propTypes2.default.bool,
  showDots: _propTypes2.default.bool,
  children: _propTypes2.default.node.isRequired,
  cardsToShow: _propTypes2.default.number,
  afterSlide: _propTypes2.default.func,
  beforeSlide: _propTypes2.default.func,
  infinite: _propTypes2.default.bool,
  responsive: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    breakPoint: _propTypes2.default.number,
    cardsToShow: _propTypes2.default.number
  })),
  autoSlide: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.bool]),
  pauseOnMouseOver: _propTypes2.default.bool,
  padding: _propTypes2.default.string,
  margin: _propTypes2.default.string,
  hideArrowsOnNoSlides: _propTypes2.default.bool,
  DotsWrapper: _propTypes2.default.func
};

exports.default = Slider;